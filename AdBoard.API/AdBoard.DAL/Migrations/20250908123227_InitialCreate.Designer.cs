// <auto-generated />
using System;
using AdBoard.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace AdBoard.DAL.Migrations
{
    [DbContext(typeof(AdBoardDbContext))]
    [Migration("20250908123227_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdBoard.DAL.Entities.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("city");

                    b.Property<int?>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hidden");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "russian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Title", "Description" });

                    b.Property<Guid?>("SubcategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("subcategory_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("announcements_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("announcements", (string)null);
                });

            modelBuilder.Entity("AdBoard.DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("categories_pkey");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("AdBoard.DAL.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("uuid")
                        .HasColumnName("announcement_id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("images_pkey");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("AdBoard.DAL.Entities.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("expiry_date");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("refresh_tokens_pkey");

                    b.HasIndex(new[] { "UserId" }, "uk7tdcd6ab5wsgoudnvj7xf1b7l");

                    b.HasIndex(new[] { "Token" }, "ukghpmfn23vmxfu3spu3lfg4r2d")
                        .IsUnique();

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("AdBoard.DAL.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("uuid")
                        .HasColumnName("announcement_id");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid")
                        .HasColumnName("buyer_id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid")
                        .HasColumnName("seller_id");

                    b.HasKey("Id")
                        .HasName("reviews_pkey");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SellerId");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("AdBoard.DAL.Entities.Subcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("subcategories_pkey");

                    b.HasIndex("CategoryId");

                    b.ToTable("subcategories", (string)null);
                });

            modelBuilder.Entity("AdBoard.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("AnnouncementUser", b =>
                {
                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("uuid")
                        .HasColumnName("announcement_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("AnnouncementId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("favorites", (string)null);
                });

            modelBuilder.Entity("AdBoard.DAL.Entities.Announcement", b =>
                {
                    b.HasOne("AdBoard.DAL.Entities.User", "Creator")
                        .WithMany("Announcements")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("fk73q2bt9jjr30t9vagpj1v0d0f");

                    b.HasOne("AdBoard.DAL.Entities.Subcategory", "Subcategory")
                        .WithMany("Announcements")
                        .HasForeignKey("SubcategoryId")
                        .HasConstraintName("fkhy8diliq1xh5bb3k9g0cnop30");

                    b.Navigation("Creator");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("AdBoard.DAL.Entities.Image", b =>
                {
                    b.HasOne("AdBoard.DAL.Entities.Announcement", "Announcement")
                        .WithMany("Images")
                        .HasForeignKey("AnnouncementId")
                        .IsRequired()
                        .HasConstraintName("fk2e3fqhg3ymh1i6wb8yovu6ksi");

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("AdBoard.DAL.Entities.RefreshToken", b =>
                {
                    b.HasOne("AdBoard.DAL.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdBoard.DAL.Entities.Review", b =>
                {
                    b.HasOne("AdBoard.DAL.Entities.Announcement", "Announcement")
                        .WithMany()
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdBoard.DAL.Entities.User", "Buyer")
                        .WithMany("UserReviews")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk2noibxu5e960l1c3wk929342s");

                    b.HasOne("AdBoard.DAL.Entities.User", "Seller")
                        .WithMany("BuyersReviews")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkouykkgwv4jl9590w2neamcktb");

                    b.Navigation("Announcement");

                    b.Navigation("Buyer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("AdBoard.DAL.Entities.Subcategory", b =>
                {
                    b.HasOne("AdBoard.DAL.Entities.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("subcategories_category_id_fkey");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AnnouncementUser", b =>
                {
                    b.HasOne("AdBoard.DAL.Entities.Announcement", null)
                        .WithMany()
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdBoard.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdBoard.DAL.Entities.Announcement", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("AdBoard.DAL.Entities.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("AdBoard.DAL.Entities.Subcategory", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("AdBoard.DAL.Entities.User", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("BuyersReviews");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
